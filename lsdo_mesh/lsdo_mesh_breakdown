points = np.empty((num_points, 3))

curves = np.empty(num_total_points, dtype=int)
curve_indices = np.empty((num_curves, 2), dtype=int) # start point to end point
curve_type = np.empty(num_curves, dtype=int) # 0: Line, 1: CircleArc, etc.

surfaces = np.empty(num_total_curves, dtype=int)
surface_indices = np.empty((num_surfaces, 2), dtype=int) # start curve to end curve
surface_type = np.empty(num_surfaces, dtype=int) # 0: quad, 1: circle, etc.

------------------------

User calls Mesh.assemble_mesh()
1. Recursive call assemble. In assemble_self, we need to
    (1) add our points/curves/surfaces to Mesh's global list of points/curves/surfaces, as lists. Turn these lists into arrays
    (2) add our virtual surfaces (virtual means result of boolean operations) to a separate list/data structure
2. We now have global arrays for points, curves, surfaces. Now run a separate (decoupled) function that removes duplicates. 
   This function takes points, curves, surfaces, surfaces_indices as inputs and returns new versions of each.
3. Now create points and curves and surfaces in order using gmsh
4. Play back the list of boolean operations using 


removing duplicate points

for i in range(npts):
    for j in range(npts):
        if norm(pts[i,:] - pts[j,:]) < eps:
            combine(i,j, points, curves)

removing duplicate curves

for i in range(nc):
    for j in range(nc):
        if is_same_curve(i, j, curves, curve_type):
            combine_curve(i, j, curves, curve_indices, curve_type, surfaces)

        if curves[i,0]==curves[j,0] and curves[i,1]==curves[j,1] and curve_type[i] == curve_type[j]:
            combine_curve(i, j, curves, curve_indices, curve_type, surfaces)
        if curves[i,0]==curves[j,1] and curves[i,1]==curves[j,0] and curve_type[i] == curve_type[j]:
            combine_curve(i, j, curves, curve_indices, curve_type, surfaces)

curve types

OCC kernel (list is longer for the regular gmsh geo class)
line, circle arc, ellipse arc, spline, bspline, bezier



geometry operations

rotate: set up as own method, not just in Point, because it can be applied to any dimension

# ------------------------ TO DO ------------------------
- 
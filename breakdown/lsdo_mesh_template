# Schedule
# Wk1: finish the lsdo_mesh
# WK2: add FFD parametrization to lsdo_mesh API and implement it
# Wk3: interface FFD-based mesh update with FEniCS (work with Ru Xiang)
# Wk4: milestone for FEniCS-based analysis
# Wk5: optimization
# Wk6: writing


import lsdo_mesh as lm


# geometry / bsplines: point, curve, surface, volume
# meshes: vertex, edge, face, block

pt_left_bottom = lm.Point(0., 0.)
pt_right_bottom = lm.Point(1., 0.)
pt_left_top = lm.Point(0., 1.)
pt_right_top = lm.Point(1., 1.)

cu_top = lm.Curve(pts=(pt_left_top, pt_left_bottom), coordinates='cartesian' or 'polar')
cu_right = ...
...

su_1 = lm.Surface(curves=(cu_top, cu_right, ...))

su_1_alternate = lm.Surface(points=(pt_left_top, ...))

su_2 = lm.Surface(...)

su_3 = lm.boolean_subtraction(su_1, su_2)
su_3 = su_1 - su_2
su_3 = su_1.__sub__(su_2)


m = lm.Mesh("Motor")
m.add_surface(su_1)
m.add_surface(su_2)
m.add_surface(su_3)
m.add_surfaces([su_1, su_2, su_3])
m.assemble() # at this point, call a function written in C++/Cython to remove duplicates
m.export_gmsh('motor_gmsh.msh')


class Surface(object):

    def __init__(self, curves=None, points=None):
        if curves is not None:
            # define via curves
        if points is not None:
            # define via points
            # internally and automatically create curves for the user

    def __sub__(self, other):
        # return self.boolean_subtraction(self, other)